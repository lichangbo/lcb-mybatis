<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:jpa="http://www.springframework.org/schema/data/jpa"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd"
       default-lazy-init="true">

    <description>Spring公共配置</description>


    <!-- 定义受环境影响易变的变量 -->
    <!--<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE" />
        <property name="ignoreResourceNotFound" value="true" />
        <property name="locations">
            <list>
                &lt;!&ndash; 标准配置 &ndash;&gt;
                <value>classpath*:core.properties</value>
            </list>
        </property>
    </bean>-->
	<context:property-placeholder location="classpath:config/core/core.properties" />
    <!-- 使用annotation 自动注册bean,并检查@Required,@Autowired的属性已被注入 -->
    <context:component-scan base-package="com.dongnao"/>

    <context:annotation-config />

    <!-- MyBatis配置 
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="mapperLocations" value="classpath:/com/soshare/xml4sql/*Mapper.xml" />
        <property name="plugins">
            <array>
                <ref bean="paginationInterceptor"/>
            </array>
        </property>
    </bean>-->
    <!-- 扫描basePackage下所有以@MyBatisRepository标识的 接口-->
    <!-- scan for mappers and let them be autowired 
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.soshare.dao" />
    </bean>-->


    <!-- JNDI DataSource for J2EE environments -->
    <!--<jee:jndi-lookup id="dataSource" jndi-name="java:comp/env/jdbc/lottery"/>-->
    <!--<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="initialSize" value="${jdbc.initialSize}"/>
        <property name="maxActive" value="${jdbc.maxActive}"/>
        <property name="maxIdle" value="${jdbc.maxIdle}"/>
        <property name="maxWait" value="${jdbc.maxWait}"/>
        <property name="logAbandoned" value="${jdbc.logAbandoned}"/>
        <property name="maxOpenPreparedStatements" value="${jdbc.maxOpenPreparedStatements}"/>
        <property name="timeBetweenEvictionRunsMillis" value="${jdbc.timeBetweenEvictionRunsMillis}"/>
        <property name="minEvictableIdleTimeMillis" value="${jdbc.minEvictableIdleTimeMillis}"/>
        <property name="testOnBorrow" value="${jdbc.testOnBorrow}"/>
        <property name="testOnReturn" value="${jdbc.testOnReturn}"/>
        <property name="testWhileIdle" value="${jdbc.testWhileIdle}"/>
        <property name="validationQuery" value="${jdbc.validationQuery}"/>
    </bean>

    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="#{coreConfiguration['jdbc.driverClassName']}"/>
        <property name="url" value="#{coreConfiguration['jdbc.url']}" />
        <property name="username" value="#{coreConfiguration['jdbc.username']}"/>
        <property name="password" value="#{coreConfiguration['jdbc.password']}"/>
        <property name="initialSize" value="#{coreConfiguration['jdbc.initialSize']}"/>
        <property name="maxActive" value="#{coreConfiguration['jdbc.maxActive']}"/>
        <property name="maxIdle" value="#{coreConfiguration['jdbc.maxIdle']}"/>
        <property name="maxWait" value="#{coreConfiguration['jdbc.maxWait']}"/>
        <property name="logAbandoned" value="#{coreConfiguration['jdbc.logAbandoned']}"/>
        <property name="maxOpenPreparedStatements" value="#{coreConfiguration['jdbc.maxOpenPreparedStatements']}"/>
        <property name="timeBetweenEvictionRunsMillis" value="#{coreConfiguration['jdbc.timeBetweenEvictionRunsMillis']}"/>
        <property name="minEvictableIdleTimeMillis" value="#{coreConfiguration['jdbc.minEvictableIdleTimeMillis']}"/>
        <property name="testOnBorrow" value="#{coreConfiguration['jdbc.testOnBorrow']}"/>
        <property name="testOnReturn" value="#{coreConfiguration['jdbc.testOnReturn']}"/>
        <property name="testWhileIdle" value="#{coreConfiguration['jdbc.testWhileIdle']}"/>
        <property name="validationQuery" value="#{coreConfiguration['jdbc.validationQuery']}"/>
    </bean>-->
	<!--
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"  destroy-method="close">
        <property name="url" value="#{coreConfiguration['jdbc.url']}" />
        <property name="username" value="#{coreConfiguration['jdbc.username']}" />
        <property name="password" value="#{coreConfiguration['jdbc.password']}" />
        <property name="driverClassName" value="#{coreConfiguration['jdbc.driverClassName']}" />
        <property name="filters" value="#{coreConfiguration['jdbc.filters']}" />

        <property name="maxActive" value="#{coreConfiguration['jdbc.maxActive']}" />
        <property name="initialSize" value="#{coreConfiguration['jdbc.initialSize']}" />
        <property name="maxWait" value="#{coreConfiguration['jdbc.maxWait']}" />
        <property name="minIdle" value="#{coreConfiguration['jdbc.minIdle']}" />

        <property name="timeBetweenEvictionRunsMillis" value="#{coreConfiguration['jdbc.timeBetweenEvictionRunsMillis']}" />
        <property name="minEvictableIdleTimeMillis" value="#{coreConfiguration['jdbc.minEvictableIdleTimeMillis']}" />

        <property name="validationQuery" value="#{coreConfiguration['jdbc.validationQuery']}" />
        <property name="testWhileIdle" value="#{coreConfiguration['jdbc.testWhileIdle']}" />
        <property name="testOnBorrow" value="#{coreConfiguration['jdbc.testOnBorrow']}" />
        <property name="testOnReturn" value="#{coreConfiguration['jdbc.testOnReturn']}" />
        <property name="poolPreparedStatements" value="#{coreConfiguration['jdbc.poolPreparedStatements']}" />
        <property name="maxOpenPreparedStatements" value="#{coreConfiguration['jdbc.maxOpenPreparedStatements']}" />
        <property name="removeAbandoned" value="#{coreConfiguration['jdbc.removeAbandoned']}" /> 
        <property name="removeAbandonedTimeout" value="#{coreConfiguration['jdbc.removeAbandonedTimeout']}" />
        <property name="logAbandoned" value="#{coreConfiguration['jdbc.logAbandoned']}" /> 
    </bean>-->

    <!-- 定义mybatis操作模板 
    <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg index="0" ref="sqlSessionFactory" />
    </bean>-->

    <!-- 初始化数据结构与默认数据 -->
    <!--<jdbc:initialize-database data-source="dataSource" ignore-failures="ALL">
        <jdbc:script location="classpath:sql/schema.sql" encoding="UTF-8" />
        <jdbc:script location="classpath:sql/import-data.sql" encoding="UTF-8" />
    </jdbc:initialize-database>-->


    
    
   

    <!-- Transaction manager for a single JDBC DataSource 
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>-->
    
    
    
    
    


    <!-- =================================================================== -->
    <!-- AOP: Configuration and Aspects                                      -->
    <!-- =================================================================== -->
    <!--<aop:config>
        &lt;!&ndash;<aop:advisor id="managerTx" advice-ref="txAdvice" pointcut="execution(* *..service.*Manager.*(..))"/>&ndash;&gt;
        <aop:advisor id="managerTx" advice-ref="txAdvice" pointcut="execution(* core.soshare.commonmmon.service.*.*(..))"/>
    </aop:config>-->

    <!-- Enable @Transactional support -->
    <!-- 使用annotation定义事务 
    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />-->

    <!-- Enable @AspectJ support -->
    <!-- 开启AOP监听 只对当前配置文件有效
    <aop:aspectj-autoproxy expose-proxy="true"/> -->


    <!-- 配置事务策略 -->
    <!--<tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="do*" propagation="REQUIRED" isolation="DEFAULT" timeout="-1" read-only="false" rollback-for="java.lang.Exception" />
            <tx:method name="load*" propagation="REQUIRED" isolation="DEFAULT" timeout="-1" read-only="false" rollback-for="java.lang.Exception" />
            <tx:method name="create*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
            <tx:method name="save*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
            <tx:method name="add*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
            <tx:method name="remove*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
            <tx:method name="update*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
            <tx:method name="upload*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
            <tx:method name="modify*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
            <tx:method name="del*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
            <tx:method name="delete*" propagation="NOT_SUPPORTED" rollback-for="java.lang.Exception"/>
            <tx:method name="*" propagation="SUPPORTS" read-only="true"/>
        </tx:attributes>
    </tx:advice>-->
    
    	<!-- <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource"> -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		<property name="driverClass">
			<value>org.gjt.mm.mysql.Driver</value>
		</property>
		<property name="jdbcUrl">
			<value>jdbc:mysql://localhost:3306/consult</value>
		</property>
		<property name="user">
			<value>myConsult</value>
		</property>
		<property name="password">
			<value>123456</value>
		</property>  
		<property name="minPoolSize" value="10" />
		<property name="maxPoolSize" value="100" />  
		<property name="maxIdleTime" value="1800" />   
		<property name="acquireIncrement" value="3" />
		<property name="maxStatements" value="1000" />
		<property name="initialPoolSize" value="10" />
		<property name="idleConnectionTestPeriod" value="60" /> 
		<property name="acquireRetryAttempts" value="30" />
		<property name="breakAfterAcquireFailure" value="true" />
		<property name="testConnectionOnCheckout" value="false" />
	</bean>
	
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="mapperLocations">
			<value>classpath*:com/dongnao/jack/xml/*Mapper.xml</value>
		</property>
	</bean>
	
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="annotationClass" value="org.springframework.stereotype.Repository"/>
		<property name="basePackage" value="com.dongnao.jack.dao"/>
		<property name="sqlSessionFactory" ref="sqlSessionFactory"/>
	</bean>
    
	<bean id="log4jdbcInterceptor" class="net.sf.log4jdbc.DataSourceSpyInterceptor" />
	<bean id="dataSourceLog4jdbcAutoProxyCreator" class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
		<property name="interceptorNames">
			<list>
				<value>log4jdbcInterceptor</value>
			</list>
		</property>
		<property name="beanNames">
			<list>
				<value>dataSource</value>
			</list>
		</property>
	</bean>
    
	<!-- Transaction manager for a single JDBC DataSource -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"/>
	</bean>
    
	<tx:advice id="userTxAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!--<tx:method name="delete*" propagation="REQUIRED" read-only="false"
				rollback-for="java.lang.Exception" no-rollback-for="java.lang.RuntimeException" />-->
			<tx:method name="save*" propagation="REQUIRED" read-only="false"
				rollback-for="java.lang.RuntimeException" />
			<tx:method name="delete*" propagation="REQUIRED" read-only="false"
				rollback-for="java.lang.RuntimeException" />
			<tx:method name="update*" propagation="REQUIRED" read-only="false"
				rollback-for="java.lang.RuntimeException" />
			<tx:method name="check*" propagation="REQUIRED" read-only="false"
				rollback-for="java.lang.RuntimeException" />
			<tx:method name="print*" propagation="REQUIRED" read-only="false"
				rollback-for="java.lang.RuntimeException" />
			<!-- 事物隔离级别配置，MySQL默认是 repeated-read 所以需要设置隔离级别为read-commit -->
			<tx:method name="*" propagation="REQUIRED" read-only="false" isolation="READ_COMMITTED"
				rollback-for="java.lang.RuntimeException" />
			<!--<tx:method name="update*" propagation="REQUIRED" read-only="false"
					rollback-for="java.lang.Exception" />
				<tx:method name="find*" propagation="SUPPORTS" />
				<tx:method name="get*" propagation="SUPPORTS" />
				<tx:method name="select*" propagation="SUPPORTS" />-->
		</tx:attributes>
	</tx:advice>
	
	<aop:config>
		<aop:pointcut id="pc"
			expression="execution(public * com.consult.service.impl..*.*(..))" /> <!--把事务控制在Service层 -->
		<aop:advisor pointcut-ref="pc" advice-ref="userTxAdvice" />
	</aop:config>
	
	<!-- Enable @Transactional support -->
	<!-- 使用annotation定义事务 
		<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />-->
    
	<!-- Enable @AspectJ support -->
	<!-- 开启AOP监听 只对当前配置文件有效 -->
	<aop:aspectj-autoproxy expose-proxy="true"/>
    
    <!-- 国际化的消息资源文件 
    <bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<property name="basenames">
			<list>
	            	<value>classpath:com/soshare/config/message/messages</value>
	        </list>
        </property>
		<property name="fileEncodings" value="utf-8"/>
		<property name="cacheSeconds" value="60"/>
	</bean> -->
	<import resource="classpath:config/redis/redis.xml"/>
</beans>